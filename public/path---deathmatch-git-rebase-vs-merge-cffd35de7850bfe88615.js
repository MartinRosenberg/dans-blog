webpackJsonp([0x8219e57b5ee4],{1294:function(e,t){e.exports={data:{post:{id:"/app/content/posts/2023-08-28--deathmatch-git-rebase-vs-merge/index.md absPath of file >>> MarkdownRemark",html:'<h1 id="deathmatch-git-rebase-vs-squash-merge"><a href="#deathmatch-git-rebase-vs-squash-merge" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deathmatch: Git Rebase vs. (Squash) Merge!</h1>\n<p>Should I Rebase? Or Squash Merge?</p>\n<ul>\n<li>\n<p>Is it a personal preference?</p>\n<ul>\n<li><em>Answer: Not when one or more teams are involved! <strong>Either choice will impact usability</strong> of the other!</em></li>\n</ul>\n</li>\n</ul>\n<h2 id="why-does-this-topic-evoke-religious-fervor"><a href="#why-does-this-topic-evoke-religious-fervor" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why does this topic evoke religious fervor?</h2>\n<p>Some engineers use knowledge of git (&#x26; the terminal) as a signal of their skill level. And any practice that’s tied up with our identity/ego can be impossible to analyze impartially, never mind change.</p>\n<p>Other factors likely include Familiarity &#x26; Survivorship Bias which can further muddy our own assessment &#x26; assumptions.</p>\n<!-- Misplaced belief in the inherent virtue of certain OSS projects\' processes. (The Linux Kernel uses rebasing, and if you don\'t, **_ArE yOu EvEn A rEaL eNgInEeR?!_**) -->\n<h2 id="key-question-why-do-you-git-commit"><a href="#key-question-why-do-you-git-commit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Key question: Why do you <code class="language-text">git commit</code>?</h2>\n<ol>\n<li>\n<p>Never losing work? (No rebase.)</p>\n<!-- - Do you commit early & often? Using a "checkpoint" or backup mindset?\n- Where the coding process itself is recorded, and generally the end result. Even half-baked code, false-starts and experiments? (e.g. `git commit -m "wip: trying redis"`, repeat often.)\n- Perhaps commit messages are less important than the code to you? -->\n</li>\n<li>Document granular or per-file changes? (Atomic commits.)</li>\n<li>\n<p>Organize related changes? (e.g. Conventional Commits <code class="language-text">feat: auth</code>, <code class="language-text">fix: auth bug</code>, etc.)</p>\n<!-- - Maybe each commit is a self-contained, atomic unit of work? (e.g. `git add package.json && git commit -m "Updated deps"`)\n- Or, you simply can\'t stand "messy" commit logs?\n- Do your PR reviews often involve reviewing commit-by-commit? -->\n</li>\n</ol>\n<!-- | 💡 What other mental model(s) define how you see commits? Please let me know @justsml! -->\n<p>The “why” will be different for one team, many teams, private repos, or big Open Source projects (e.g. Docker, Postgres, or the Linux Kernel.)</p>\n<p>It’s no wonder there’s frequent disagreement about the “right” way to use git.</p>\n<blockquote>\n<p>At the end of the day, consider “the why” of how you’re using git. Is it <strong>providing the most practical value</strong>?</p>\n</blockquote>\n<h2 id="scenario-create-a-revised-release-tag"><a href="#scenario-create-a-revised-release-tag" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scenario: Create a revised release tag</h2>\n<p>Let us compare the process of creating a tag release excluding some recent commits on <code class="language-text">main</code>.</p>\n<p><img src="/git-branching-with-main-simplified-28211b49f96d122626f9574380847c5c.svg" alt="Git Tag Releasing from main with 2 feature branches"></p>\n<h2 id="the-rebase-way"><a href="#the-rebase-way" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Rebase Way</h2>\n<p>Mental model: “I want to create an alternate version of an existing history. (e.g. I made an oopsie 16 merges ago, and may need fine-grained control to correct it. Also, might get stuck in a seemingly endless cycle of conflict &#x26; <code class="language-text">--continue</code>.)”</p>\n<ol>\n<li>Get latest: <code class="language-text">git checkout main</code> &#x26;&#x26; <code class="language-text">git pull</code></li>\n<li>Create new branch: <code class="language-text">git checkout -b release/v1.2.3</code></li>\n<li>Start interactive rebase from where you want to travel back in time. <code class="language-text">git rebase -i HEAD~6</code> (Note: <code class="language-text">HEAD~6</code> is “ref” shorthand for <code class="language-text">6 commits ago</code>)</li>\n<li>Drop desired commit(s) by changing their prefix to <code class="language-text">drop</code>. Save and close the editor.</li>\n<li>Fix merge conflicts, <code class="language-text">git add .</code> &#x26;&#x26; <code class="language-text">git rebase --continue</code> (do NOT <code class="language-text">git commit</code>).</li>\n<li>Repeat previous step until complete.</li>\n<li>Tag/push using existing process. Example <code class="language-text">git tag -a v1.2.3 -m &#39;Release v1.2.3&#39;</code> &#x26;&#x26; <code class="language-text">git push --tags</code></li>\n</ol>\n<h3 id="pros"><a href="#pros" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pros</h3>\n<ul>\n<li>\n<p>🔌 Absolute power. You can change history.</p>\n<!-- - 🎭 Practice your Engineering Theater skills. -->\n</li>\n</ul>\n<h3 id="cons"><a href="#cons" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cons</h3>\n<ul>\n<li>😰 Absolute power. You can change history. (Ok, a Pro &#x26; Con…)</li>\n<li>🔂 You can end up in a seemingly endless cycle of conflict &#x26; <code class="language-text">—-continue</code>.</li>\n<li>🙀 Breaks key collaboration features: lost/orphan PR comments.</li>\n<li>🖇️ Permalinks can become not that permanent.</li>\n</ul>\n<h2 id="the-squash-merge-way"><a href="#the-squash-merge-way" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The (Squash) Merge Way</h2>\n<p>Mental model: “I want a custom release, starting at a given point, and including any desired branch(es).”</p>\n<ol>\n<li>Get latest: <code class="language-text">git checkout main</code> &#x26;&#x26; <code class="language-text">git pull</code></li>\n<li>Load the desired starting point: <code class="language-text">git checkout HEAD~3</code> (3 commits back, or find a hash with <code class="language-text">git reflog</code>.)</li>\n<li>Create new branch: <code class="language-text">git checkout -b release/v1.2.3</code></li>\n<li>Merge in desired branches and/or commits: <code class="language-text">git merge feature/hot-newness bug/fix-123</code>.</li>\n<li>Fix any merge conflict (should it come up.)</li>\n<li>Tag/push using existing process. Example <code class="language-text">git tag -a v1.2.3 -m &#39;Release v1.2.3&#39;</code> &#x26;&#x26; <code class="language-text">git push --tags</code></li>\n</ol>\n<h3 id="pros-1"><a href="#pros-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pros</h3>\n<ul>\n<li>💪 Less process, fewer conflicts overall, and uses existing git command knowledge.</li>\n<li>🚀 Lets you think at a higher PR/branch level, ignoring commit level granularity (unless needed.)</li>\n<li>🦺 Non-destructive. You can go back and/or create new branches anytime.</li>\n<li>🎥 Leaves existing commits &#x26; messages as a whole, which leads to less ‘blame’ noise.</li>\n</ul>\n<h3 id="cons-1"><a href="#cons-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cons</h3>\n<ul>\n<li>🔏 Harder to change commit messages.</li>\n<li>🤐 Harder to hide your work.</li>\n</ul>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conclusion</h2>\n<p>At the end of the day, <strong>I prefer a simpler process without risky commands.</strong></p>\n<!-- **Squash merge** is the clear winner here. It\'s **simpler** and **less error-prone**. It also **leaves the existing commit history intact**. This is a **huge win** for **collaboration** and **code review**. -->\n<!-- Include a diagram of a rebase flow with 2 feature branches -->\n<p>Even though <em>Rebasers</em> indeed have ways to solve (or avoid) their problems, the <strong>fact remains: you’ll eventually need a black belt in git fu.</strong> (e.g. Even a humble <code class="language-text">git push</code> can face extra complexity: was it <code class="language-text">git push --force</code> or <code class="language-text">git push --force-with-lease</code>? Why deal with that at all?)</p>\n<p>There’s another reason <strong>rebasing</strong> to create a revised history <strong>will always be at a disadvantage</strong> compared to <strong><code class="language-text">git merge ...</code>.</strong> A <code class="language-text">git merge</code> can apply more advanced algorithms &#x26; ignore intermediate states to avoid conflicts. Where <strong>rebasing must re-play the commit history in the sequence</strong> specified.</p>\n<p>Ultimately <strong>rebasing means you’ll occasionally find yourself re-experiencing irrelevant old commits &#x26; conflicts</strong> - even if you know they have since been removed or resolved. (I know, there’s <code class="language-text">git rebase --skip</code>, <code class="language-text">git rebase --abort</code>, or was it <code class="language-text">--quit</code>? Again, why deal with it at all?)</p>\n<h2 id="summary"><a href="#summary" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Summary</h2>\n<ul>\n<li>\n<p>💃 Answer: <strong>SQUASH MERGE</strong> your PRs onto <code class="language-text">main</code>.</p>\n<ul>\n<li>Your branch history will be there if needed, and <code class="language-text">main</code> can stay “clean.”</li>\n</ul>\n</li>\n<li>\n<p><em>🔤 Always Be Committing!</em></p>\n<ul>\n<li>In >95% of corporate projects the “backup mindset” is preferable to the “sculpted art” mindset. As time goes on, your commit messages’ meaning will fade, much faster than the code whose logic &#x26; tests will maintain their significance.</li>\n</ul>\n</li>\n</ul>\n<!--\n### Bonus: Releases Tip\n\nEver need just an individual file or a few folders from a branch? Without the commit history?\n\n- You can use the special "--" separator with `git checkout` to stay in the current branch while copying the specified files:\n- `git checkout feature/half-a-feature **--** <folder or file path>`\n- Make sure you\'ve committed any changes you want to keep first, as this will overwrite any local changes.\n-->',htmlAst:{type:"root",children:[{type:"element",tagName:"h1",properties:{id:"deathmatch-git-rebase-vs-squash-merge"},children:[{type:"element",tagName:"a",properties:{href:"#deathmatch-git-rebase-vs-squash-merge",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Deathmatch: Git Rebase vs. (Squash) Merge!"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Should I Rebase? Or Squash Merge?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Is it a personal preference?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"Answer: Not when one or more teams are involved! "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"Either choice will impact usability"}]},{type:"text",value:" of the other!"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"why-does-this-topic-evoke-religious-fervor"},children:[{type:"element",tagName:"a",properties:{href:"#why-does-this-topic-evoke-religious-fervor",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Why does this topic evoke religious fervor?"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Some engineers use knowledge of git (& the terminal) as a signal of their skill level. And any practice that’s tied up with our identity/ego can be impossible to analyze impartially, never mind change."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Other factors likely include Familiarity & Survivorship Bias which can further muddy our own assessment & assumptions."}]},{type:"text",value:"\n"},{type:"comment",value:" Misplaced belief in the inherent virtue of certain OSS projects' processes. (The Linux Kernel uses rebasing, and if you don't, **_ArE yOu EvEn A rEaL eNgInEeR?!_**) "},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"key-question-why-do-you-git-commit"},children:[{type:"element",tagName:"a",properties:{href:"#key-question-why-do-you-git-commit",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Key question: Why do you "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git commit"}]},{type:"text",value:"?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Never losing work? (No rebase.)"}]},{type:"text",value:"\n"},{type:"comment",value:' - Do you commit early & often? Using a "checkpoint" or backup mindset?\n- Where the coding process itself is recorded, and generally the end result. Even half-baked code, false-starts and experiments? (e.g. `git commit -m "wip: trying redis"`, repeat often.)\n- Perhaps commit messages are less important than the code to you? '},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Document granular or per-file changes? (Atomic commits.)"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Organize related changes? (e.g. Conventional Commits "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"feat: auth"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"fix: auth bug"}]},{type:"text",value:", etc.)"}]},{type:"text",value:"\n"},{type:"comment",value:' - Maybe each commit is a self-contained, atomic unit of work? (e.g. `git add package.json && git commit -m "Updated deps"`)\n- Or, you simply can\'t stand "messy" commit logs?\n- Do your PR reviews often involve reviewing commit-by-commit? '},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"comment",value:" | 💡 What other mental model(s) define how you see commits? Please let me know @justsml! "},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"The “why” will be different for one team, many teams, private repos, or big Open Source projects (e.g. Docker, Postgres, or the Linux Kernel.)"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"It’s no wonder there’s frequent disagreement about the “right” way to use git."}]},{type:"text",value:"\n"},{type:"element",tagName:"blockquote",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"At the end of the day, consider “the why” of how you’re using git. Is it "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"providing the most practical value"}]},{type:"text",value:"?"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"scenario-create-a-revised-release-tag"},children:[{type:"element",tagName:"a",properties:{href:"#scenario-create-a-revised-release-tag",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Scenario: Create a revised release tag"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Let us compare the process of creating a tag release excluding some recent commits on "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"main"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"img",properties:{src:"/git-branching-with-main-simplified-28211b49f96d122626f9574380847c5c.svg",alt:"Git Tag Releasing from main with 2 feature branches"},children:[]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"the-rebase-way"},children:[{type:"element",tagName:"a",properties:{href:"#the-rebase-way",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"The Rebase Way"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Mental model: “I want to create an alternate version of an existing history. (e.g. I made an oopsie 16 merges ago, and may need fine-grained control to correct it. Also, might get stuck in a seemingly endless cycle of conflict & "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"--continue"}]},{type:"text",value:".)”"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Get latest: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git checkout main"}]},{type:"text",value:" && "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git pull"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Create new branch: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git checkout -b release/v1.2.3"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Start interactive rebase from where you want to travel back in time. "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git rebase -i HEAD~6"}]},{type:"text",value:" (Note: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"HEAD~6"}]},{type:"text",value:" is “ref” shorthand for "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"6 commits ago"}]},{type:"text",value:")"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Drop desired commit(s) by changing their prefix to "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"drop"}]},{type:"text",value:". Save and close the editor."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Fix merge conflicts, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git add ."}]},{type:"text",value:" && "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git rebase --continue"}]},{type:"text",value:" (do NOT "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git commit"}]},{type:"text",value:")."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Repeat previous step until complete."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Tag/push using existing process. Example "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git tag -a v1.2.3 -m 'Release v1.2.3'"}]},{type:"text",value:" && "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git push --tags"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"pros"},children:[{type:"element",tagName:"a",properties:{href:"#pros",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Pros"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"🔌 Absolute power. You can change history."}]},{type:"text",value:"\n"},{type:"comment",value:" - 🎭 Practice your Engineering Theater skills. "},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"cons"},children:[{type:"element",tagName:"a",properties:{href:"#cons",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Cons"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"😰 Absolute power. You can change history. (Ok, a Pro & Con…)"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🔂 You can end up in a seemingly endless cycle of conflict & "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"—-continue"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🙀 Breaks key collaboration features: lost/orphan PR comments."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🖇️ Permalinks can become not that permanent."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"the-squash-merge-way"},children:[{type:"element",tagName:"a",properties:{href:"#the-squash-merge-way",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"The (Squash) Merge Way"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",
value:"Mental model: “I want a custom release, starting at a given point, and including any desired branch(es).”"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Get latest: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git checkout main"}]},{type:"text",value:" && "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git pull"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Load the desired starting point: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git checkout HEAD~3"}]},{type:"text",value:" (3 commits back, or find a hash with "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git reflog"}]},{type:"text",value:".)"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Create new branch: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git checkout -b release/v1.2.3"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Merge in desired branches and/or commits: "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git merge feature/hot-newness bug/fix-123"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Fix any merge conflict (should it come up.)"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Tag/push using existing process. Example "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git tag -a v1.2.3 -m 'Release v1.2.3'"}]},{type:"text",value:" && "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git push --tags"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"pros-1"},children:[{type:"element",tagName:"a",properties:{href:"#pros-1",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Pros"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"💪 Less process, fewer conflicts overall, and uses existing git command knowledge."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🚀 Lets you think at a higher PR/branch level, ignoring commit level granularity (unless needed.)"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🦺 Non-destructive. You can go back and/or create new branches anytime."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🎥 Leaves existing commits & messages as a whole, which leads to less ‘blame’ noise."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{id:"cons-1"},children:[{type:"element",tagName:"a",properties:{href:"#cons-1",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Cons"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🔏 Harder to change commit messages."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"🤐 Harder to hide your work."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"conclusion"},children:[{type:"element",tagName:"a",properties:{href:"#conclusion",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Conclusion"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"At the end of the day, "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"I prefer a simpler process without risky commands."}]}]},{type:"text",value:"\n"},{type:"comment",value:" **Squash merge** is the clear winner here. It's **simpler** and **less error-prone**. It also **leaves the existing commit history intact**. This is a **huge win** for **collaboration** and **code review**. "},{type:"text",value:"\n"},{type:"comment",value:" Include a diagram of a rebase flow with 2 feature branches "},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Even though "},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"Rebasers"}]},{type:"text",value:" indeed have ways to solve (or avoid) their problems, the "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"fact remains: you’ll eventually need a black belt in git fu."}]},{type:"text",value:" (e.g. Even a humble "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git push"}]},{type:"text",value:" can face extra complexity: was it "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git push --force"}]},{type:"text",value:" or "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git push --force-with-lease"}]},{type:"text",value:"? Why deal with that at all?)"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"There’s another reason "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"rebasing"}]},{type:"text",value:" to create a revised history "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"will always be at a disadvantage"}]},{type:"text",value:" compared to "},{type:"element",tagName:"strong",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git merge ..."}]},{type:"text",value:"."}]},{type:"text",value:" A "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git merge"}]},{type:"text",value:" can apply more advanced algorithms & ignore intermediate states to avoid conflicts. Where "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"rebasing must re-play the commit history in the sequence"}]},{type:"text",value:" specified."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Ultimately "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"rebasing means you’ll occasionally find yourself re-experiencing irrelevant old commits & conflicts"}]},{type:"text",value:" - even if you know they have since been removed or resolved. (I know, there’s "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git rebase --skip"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"git rebase --abort"}]},{type:"text",value:", or was it "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"--quit"}]},{type:"text",value:"? Again, why deal with it at all?)"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{id:"summary"},children:[{type:"element",tagName:"a",properties:{href:"#summary",ariaHidden:!0,className:["anchor"]},children:[{type:"element",tagName:"svg",properties:{ariaHidden:"true",height:16,version:"1.1",viewBox:"0 0 16 16",width:16},children:[{type:"element",tagName:"path",properties:{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},children:[]}]}]},{type:"text",value:"Summary"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"💃 Answer: "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"SQUASH MERGE"}]},{type:"text",value:" your PRs onto "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"main"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Your branch history will be there if needed, and "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"main"}]},{type:"text",value:" can stay “clean.”"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"🔤 Always Be Committing!"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"In >95% of corporate projects the “backup mindset” is preferable to the “sculpted art” mindset. As time goes on, your commit messages’ meaning will fade, much faster than the code whose logic & tests will maintain their significance."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"comment",value:'\n### Bonus: Releases Tip\n\nEver need just an individual file or a few folders from a branch? Without the commit history?\n\n- You can use the special "--" separator with `git checkout` to stay in the current branch while copying the specified files:\n- `git checkout feature/half-a-feature **--** <folder or file path>`\n- Make sure you\'ve committed any changes you want to keep first, as this will overwrite any local changes.\n'}],data:{quirksMode:!1}},wordCount:{paragraphs:61,sentences:87,words:678},fields:{slug:"/deathmatch-git-rebase-vs-merge/",prefix:"2023-08-28"},frontmatter:{title:"Deathmatch: Git Rebase vs. Merge",subTitle:"A timeless question",category:"Git",relativePath:"/content/posts/2023-08-28--deathmatch-git-rebase-vs-merge/index.md",tags:["engineering","git","rebase","merge"],date:"2023-08-27T00:00:00.000Z",modified:"2023-09-11T00:00:00.000Z",cover:{childImageSharp:{resolutions:{width:220,height:220,src:"/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-bc901.jpg",srcSet:"/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-bc901.jpg 1x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-39e82.jpg 1.5x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-a8256.jpg 2x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-ef5e1.jpg 3x",srcWebp:"/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-ec1cf.webp",srcSetWebp:"/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-ec1cf.webp 1x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-c5012.webp 1.5x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-6ab8f.webp 2x,\n/static/casper-johansson-GBHnQXbY2Ts-unsplash-cropped-e7e73d837dd561eea8f81757618aa6f3-f9a43.webp 3x"}}}}},author:{id:"/app/content/parts/author.md absPath of file >>> MarkdownRemark",html:'<p>Dan Levy is an accomplished programmer, teacher, speaker, cat dad and writer.\n<br /><br /></p>\n<p>Dan’s Open Source documentation and related writing is relied on by countless developers who use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Mozilla Developer Network</a> site daily.\n<br /><br /></p>\n<p>His contributions span dozens of well-known projects, including <a href="https://github.com/nodejs/nodejs.org">NodeJS</a>, <a href="https://github.com/moby/moby">Docker</a>, <a href="https://github.com/ReactTraining/react-router/">React Router</a>, <a href="https://github.com/gatsbyjs/gatsby">GatsbyJS</a>, <a href="https://github.com/Angular/Angular">Angular</a>, <a href="https://github.com/petkaantonov/bluebird">Bluebird</a>, <a href="https://github.com/lodash/lodash">Lodash</a>, <a href="https://github.com/rancher/rancher">Rancher</a>, <a href="https://github.com/minio/minio">Minio</a>, <a href="https://github.com/lord/slate">Slate</a>, <a href="https://github.com/ReactiveX/IxJS">IxJS</a>, and <a href="https://github.com/functional-promises/functional-promises">Functional Promises</a>.\n<br /><br /></p>\n<p>Feel free to <a href="https://calendly.com/danlevy/">grab a spot on Dan’s calendar</a>, or reach out via <a href="https://twitter.com/justsml/">Twitter DMs</a> or <a href="/contact/">the contact form</a>.</p>'},footnote:{id:"/app/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:'<p>Unless otherwise noted, copyright ©2014-2021 Dan Levy.</p>\n<ul>\n<li>Photos by <a href="https://unsplash.com">unsplash.com</a></li>\n</ul>'},site:{siteMetadata:{facebook:{appId:""}}},allTags:{group:[{fieldValue:"ai",totalCount:1},{fieldValue:"amazon-web-services",totalCount:1},{fieldValue:"angularjs",totalCount:2},{fieldValue:"api-keys",totalCount:2},{fieldValue:"architecture",totalCount:1},{fieldValue:"artificial intelligence",totalCount:1},{fieldValue:"async",totalCount:5},{fieldValue:"async-await",totalCount:1},{fieldValue:"await",totalCount:1},{fieldValue:"axios",totalCount:1},{fieldValue:"azure",totalCount:1},{fieldValue:"benchmarks",totalCount:1},{fieldValue:"boot2docker",totalCount:1},{fieldValue:"challenge",totalCount:1},{fieldValue:"closure",totalCount:1},{fieldValue:"cloud",totalCount:1},{fieldValue:"collaborative-culture",totalCount:2},{fieldValue:"composition",totalCount:5},{fieldValue:"culture",totalCount:2},{fieldValue:"date",totalCount:1},{fieldValue:"date class",totalCount:1},{fieldValue:"debugging",totalCount:1},{fieldValue:"design",totalCount:1},{fieldValue:"development",totalCount:2},{fieldValue:"devops",totalCount:5},{fieldValue:"digital-ocean",totalCount:1},{fieldValue:"docker",totalCount:4},{fieldValue:"dos",totalCount:1},{fieldValue:"dotenv",totalCount:1},{fieldValue:"elasticsearch",totalCount:1},{fieldValue:"engineering",totalCount:2},{fieldValue:"errors",totalCount:2},{fieldValue:"examples",totalCount:1},{fieldValue:"fails",totalCount:1},{fieldValue:"fetch",totalCount:1},{fieldValue:"functional",totalCount:1},{fieldValue:"functional river",totalCount:1},{fieldValue:"git",totalCount:1},{fieldValue:"go",totalCount:1},{fieldValue:"google-cloud-engine",totalCount:1},{fieldValue:"gotchas",totalCount:1},{fieldValue:"growth",totalCount:2},{fieldValue:"guides",totalCount:1},{fieldValue:"haskell",totalCount:1},{fieldValue:"hoisting",totalCount:1},{fieldValue:"io",totalCount:1},{fieldValue:"javascript",totalCount:12},{fieldValue:"json-web-tokens",totalCount:1},{fieldValue:"languages",totalCount:1},{fieldValue:"lua",totalCount:1},{fieldValue:"merge",totalCount:1},{fieldValue:"models",totalCount:1},{fieldValue:"modules",totalCount:1},{fieldValue:"mongodb",totalCount:2},{fieldValue:"mysql",totalCount:1},{fieldValue:"naming",totalCount:1},{fieldValue:"nodejs",totalCount:3},{fieldValue:"opinion",totalCount:1},{fieldValue:"organization",totalCount:2},{fieldValue:"ovh.net",totalCount:1},{fieldValue:"packet.net",totalCount:1},{fieldValue:"patterns",totalCount:7},{fieldValue:"performance",totalCount:4},{fieldValue:"personal-development",totalCount:2},{fieldValue:"pipeline",totalCount:1},{fieldValue:"postgres",totalCount:1},{fieldValue:"programming",totalCount:10},{fieldValue:"promises",totalCount:8},{fieldValue:"python",totalCount:2},{fieldValue:"quiz",totalCount:2},{fieldValue:"rebase",totalCount:1},{fieldValue:"regex",totalCount:1},{fieldValue:"remote-exploit",totalCount:1},{fieldValue:"resources",totalCount:1},{fieldValue:"rust",totalCount:1},{fieldValue:"scala",totalCount:1},{fieldValue:"scaling",totalCount:1},{fieldValue:"scoping",totalCount:1},{fieldValue:"secrets",totalCount:2},{fieldValue:"security",totalCount:4},{fieldValue:"self-driving cars",totalCount:1},{fieldValue:"server",totalCount:1},{fieldValue:"servers",totalCount:2},{fieldValue:"setup",totalCount:1},{fieldValue:"shell script",totalCount:1},{fieldValue:"smalltalk",totalCount:1},{fieldValue:"source code",totalCount:2},{fieldValue:"ssd",totalCount:1},{fieldValue:"stateful",totalCount:1},{fieldValue:"teams",totalCount:2},{fieldValue:"tokens",totalCount:2},{fieldValue:"tuning",totalCount:1},{fieldValue:"types",totalCount:1},{fieldValue:"typescript",totalCount:3},{fieldValue:"visualizing",totalCount:1}]}},pathContext:{slug:"/deathmatch-git-rebase-vs-merge/"}}}});
//# sourceMappingURL=path---deathmatch-git-rebase-vs-merge-cffd35de7850bfe88615.js.map