---
import { formatDistance } from "date-fns/formatDistance";

import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { InfoLabel } from "../components/ui/infoLabel";
import AnalyticsTag from "../components/AnalyticsTag.astro";
import { GitHubIssueComments } from "../components/Comments";
import socialBanner from "../assets/social-banner.png";

import { CalendarIcon, TagIcon } from "lucide-react";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { GOOGLE_ANALYTICS_ID } from "../consts";

import "@/styles/nav.css";
import "@/styles/global.css";
import "@/styles/layout.css";

type Props = {
  children: any[];

  frontmatter?: {
    title: string;
    subTitle?: string;
    commentsKeyOverride?: string;
    date?: string;
    modified?: string;
    tags?: string[];
    cover?: unknown;
    cover_full_width?: unknown;
    category?: string;
  };
};

const {
  title,
  subTitle,
  cover,
  cover_full_width,
  category,
  date,
  modified,
  commentsKeyOverride,
} = Astro.props.frontmatter! || Astro.props;

// console.log("Post.astro", Astro.props);

const createdAgo = date ? formatDistance(new Date(date), new Date()) : "";

const modifiedAgo = modified
  ? formatDistance(new Date(modified), new Date())
  : "";
const modifiedDate = modified ? new Date(modified) : null;
// yyyy-MM-dd
const lastModified = modifiedDate
  ? modifiedDate.toISOString().split("T")[0]
  : "";
const publishedTime = date ? new Date(date).toISOString().split("T")[0] : "";

const coverUrl =
  cover && typeof cover === "object" && "src" in cover
    ? (cover as ImageMetadata)
    : typeof cover === "string"
      ? cover
      : socialBanner;

const commentsKey = commentsKeyOverride || new URL(Astro.request.url).pathname;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={`${subTitle}`} image={coverUrl} />
    {lastModified && <meta http-equiv="last-modified" content={lastModified} />}
    {
      publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )
    }

    <script is:inline>
      // Hackety hack to update the score on quiz pages
      window.__updateCounts = () => {
        const scoreEls = document.querySelectorAll(".score");
        const scoreLabel = document.querySelector(".score label");
        const questions = document.querySelectorAll("main .challenge");
        const correct = document.querySelectorAll("main .challenge.correct");

        const isQuizPage = questions.length > 0;

        if (!isQuizPage) return; // Not a quiz page

        if (scoreEls.length >= 2)
          console.error("Multiple score elements found");
        if (!scoreLabel)
          return console.error("Expected score label, not found");

        if (questions.length === correct.length) {
          scoreLabel.innerHTML = "All correct!";
        } else {
          scoreLabel.innerHTML = `${correct.length} / ${questions.length}`;
        }
      };

      document.addEventListener("DOMContentLoaded", function () {
        const quiz = document.querySelector(".quiz-ui");

        if (quiz) {
          setTimeout(window.__updateCounts, 500);
          quiz.addEventListener("click", () => {
            window.__updateCounts();
          });
        }
      });
    </script>
  </head>

  <body>
    <Header className="content-grid" date={date} modified={modified} />
    <main class="content-grid">
      {title && <h1>{title}</h1>}
      {subTitle && <h2>{subTitle}</h2>}

      <div class="info skinny">
        {
          createdAgo && (
            <InfoLabel
              text={[`created ${createdAgo} ago`, `updated ${modifiedAgo} ago`]}
            >
              <CalendarIcon className="icon" strokeWidth={1} />
            </InfoLabel>
          )
        }

        {
          category && (
            <InfoLabel text={category!}>
              <TagIcon className="icon" strokeWidth={1} />
            </InfoLabel>
          )
        }
      </div>

      {
        cover_full_width &&
        typeof cover_full_width === "object" &&
        "src" in cover_full_width ? (
          <Image
            src={cover_full_width as ImageMetadata}
            width="400"
            alt={title}
            class="full-width flow"
          />
        ) : (
          cover &&
          typeof cover === "object" &&
          "src" in cover && (
            <div class="hero-image">
              <div class="hero-image-wrapper">
                <Image src={cover as ImageMetadata} alt={title}
                  widths={[400, 800, 1200, 1600, 2000]}
                  sizes={`(min-width: 800px) 400px, (min-width: 1200px) 800px, (min-width: 1600px) 1200px, (min-width: 2000px) 1600px, 2000px`}
                />
              </div>
            </div>
          )
        )
      }

      <slot />

      <div class="comments-wrapper full-width">
        <GitHubIssueComments client:only="react" path={commentsKey} />
      </div>
    </main>
    <Footer />
    <AnalyticsTag googleAnalyticsId={GOOGLE_ANALYTICS_ID} />
  </body>
</html>
