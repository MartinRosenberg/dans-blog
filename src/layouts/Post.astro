---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { InfoLabel } from "../components/ui/infoLabel";
import AnalyticsTag from "../components/AnalyticsTag.astro";
import { GitHubIssueComments } from "../components/Comments";
import { CreatedModifiedLabel } from "../components/CreatedModifiedLabel";
import socialBanner from "../assets/social-banner.webp";

import { TagIcon } from "lucide-react";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

type Props = {
  children: any[];

  frontmatter?: {
    title: string;
    subTitle?: string;
    commentsKeyOverride?: string;
    date?: string;
    modified?: string;
    tags?: string[];
    cover?: unknown;
    cover_full_width?: unknown;
    category?: string;
  };
};

const {
  title,
  subTitle,
  cover,
  cover_full_width,
  category,
  date,
  modified,
  commentsKeyOverride,
} = Astro.props.frontmatter! || Astro.props;

const modDate = modified ? new Date(modified) : null;
const lastModified = modDate ? modDate.toISOString().split("T")[0] : "";
const pubTime = date ? new Date(date).toISOString().split("T")[0] : "";

const coverUrl =
  cover && typeof cover === "object" && "src" in cover
    ? (cover as ImageMetadata)
    : typeof cover === "string"
      ? cover
      : socialBanner;

const commentsKey = commentsKeyOverride || new URL(Astro.request.url).pathname;

const responsiveImgSizes_breakLeft = {
  widths: [480, 720, 1280, 1920],
  sizes: `
    (min-width: 500px) 480px,
    (min-width: 800px) 720px,
    (min-width: 1440px) 1280px,
    1920px`,
};
const responsiveImgSizes_breakRight = {
  widths: [500, 800, 1440, 1920],
  sizes: `
    (min-width: 480px) 500px,
    (min-width: 720px) 800px,
    (min-width: 1200px) 1440px,
    1920px`,
};

---

<html lang="en">
  <head>
    <BaseHead title={title} description={`${subTitle}`} image={coverUrl} />
    {lastModified && <meta http-equiv="last-modified" content={lastModified} />}
    {pubTime && <meta property="article:published_time" content={pubTime} />}
  </head>

  <body>
    <Header className="content-grid article" date={date} modified={modified} />
    <main class="content-grid article">
      {title && <h1>{title}</h1>}
      {subTitle && <h2>{subTitle}</h2>}

      <aside class="skinny">
        <div class="info">
          <CreatedModifiedLabel client:idle date={date} modified={modified} />

          {
            category && (
              <InfoLabel text={category!}>
                <TagIcon className="icon" strokeWidth={1} />
              </InfoLabel>
            )
          }
        </div>
      </aside>

      {
        cover_full_width &&
        typeof cover_full_width === "object" &&
        "src" in cover_full_width ? (
          <Image
            class="full-width flow"
            src={cover_full_width as ImageMetadata}
            alt={title}
            format="webp"
            {...responsiveImgSizes_breakLeft}
          />
        ) : (
          cover &&
          typeof cover === "object" &&
          "src" in cover && (
            <div class="hero-image">
              <div class="hero-image-wrapper">
                <Image
                  src={cover as ImageMetadata}
                  alt={title}
                  {...responsiveImgSizes_breakRight}
                />
              </div>
            </div>
          )
        )
      }

      <slot />

      <div class="comments-wrapper full-width">
        <GitHubIssueComments client:only="react" path={commentsKey} />
      </div>
    </main>
    <Footer />
    <AnalyticsTag />
  </body><script is:inline>
    // Hackety hack to update the score on quiz pages
    window.__updateCounts = () => {
      const scoreEls = document.querySelectorAll(".score");
      const scoreLabel = document.querySelector(".score label");
      const questions = document.querySelectorAll("main .challenge");
      const correct = document.querySelectorAll("main .challenge.correct");

      const isQuizPage = questions.length > 0;

      if (!isQuizPage) return; // Not a quiz page

      if (scoreEls.length >= 2) console.error("Multiple score elements found");
      if (!scoreLabel) return console.error("Expected score label, not found");
      if (correct.length > 0) {
        scoreEls[0].classList.add("active");
      }
      if (questions.length === correct.length) {
        scoreEls[0].classList.add("all-correct");
        scoreLabel.innerHTML = "All correct!";
      } else {
        scoreLabel.innerHTML = `${correct.length} / ${questions.length}`;
      }
    };

    document.addEventListener("DOMContentLoaded", function () {
      const quiz = document.querySelector(".quiz-ui");

      if (quiz) {
        setTimeout(window.__updateCounts, 500);
        quiz.addEventListener("click", () => {
          window.__updateCounts();
        });
      }
    });
  </script>
</html>
